
Tailgator_v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000bc  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000893  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000008c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000287  00000000  00000000  00000902  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000013a  00000000  00000000  00000b89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000835  00000000  00000000  00000cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  000014f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000aa72  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000bfb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000268c  00000000  00000000  0000bfd2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	02 d0       	rcall	.+4      	; 0x66 <main>
  62:	2a c0       	rjmp	.+84     	; 0xb8 <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <main>:
#define LED2_ON 0x02


int main (void)
{
	board_init();
  66:	27 d0       	rcall	.+78     	; 0xb6 <board_init>
	//set DDRA to both of these constants we defined
	DDRA = A0_OUTPUT + A1_OUTPUT;
  68:	83 e0       	ldi	r24, 0x03	; 3
  6a:	8a bb       	out	0x1a, r24	; 26
	for(;;)
	{
		//Here we just set port A based on our constants we defined earlier. 
		//It is much easier to read using constants this way, rather than setting raw hex values
		
		PORTA = LED1_ON;
  6c:	91 e0       	ldi	r25, 0x01	; 1
		_delay_ms(500);
		
		PORTA  = LEDS_OFF;
		_delay_ms(200);
		
		PORTA = LED2_ON;
  6e:	82 e0       	ldi	r24, 0x02	; 2
	for(;;)
	{
		//Here we just set port A based on our constants we defined earlier. 
		//It is much easier to read using constants this way, rather than setting raw hex values
		
		PORTA = LED1_ON;
  70:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	2f e9       	ldi	r18, 0x9F	; 159
  74:	36 e8       	ldi	r19, 0x86	; 134
  76:	41 e0       	ldi	r20, 0x01	; 1
  78:	21 50       	subi	r18, 0x01	; 1
  7a:	30 40       	sbci	r19, 0x00	; 0
  7c:	40 40       	sbci	r20, 0x00	; 0
  7e:	e1 f7       	brne	.-8      	; 0x78 <main+0x12>
  80:	00 c0       	rjmp	.+0      	; 0x82 <main+0x1c>
  82:	00 00       	nop
		_delay_ms(500);
		
		PORTA  = LEDS_OFF;
  84:	1b ba       	out	0x1b, r1	; 27
  86:	ef e4       	ldi	r30, 0x4F	; 79
  88:	f3 ec       	ldi	r31, 0xC3	; 195
  8a:	31 97       	sbiw	r30, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <main+0x24>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <main+0x2a>
  90:	00 00       	nop
		_delay_ms(200);
		
		PORTA = LED2_ON;
  92:	8b bb       	out	0x1b, r24	; 27
  94:	ff e9       	ldi	r31, 0x9F	; 159
  96:	26 e8       	ldi	r18, 0x86	; 134
  98:	31 e0       	ldi	r19, 0x01	; 1
  9a:	f1 50       	subi	r31, 0x01	; 1
  9c:	20 40       	sbci	r18, 0x00	; 0
  9e:	30 40       	sbci	r19, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x34>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x3e>
  a4:	00 00       	nop
		_delay_ms(500);
		
		PORTA  = LEDS_OFF;
  a6:	1b ba       	out	0x1b, r1	; 27
  a8:	ef e4       	ldi	r30, 0x4F	; 79
  aa:	f3 ec       	ldi	r31, 0xC3	; 195
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x46>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x4c>
  b2:	00 00       	nop
  b4:	dd cf       	rjmp	.-70     	; 0x70 <main+0xa>

000000b6 <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
  b6:	08 95       	ret

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
